name: Deployment Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  pre-deployment-validation:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      deploy_environment: ${{ steps.determine-env.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Determine deployment environment
      id: determine-env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
        else
          echo "environment=development" >> $GITHUB_OUTPUT
        fi
    
    - name: Validate deployment configuration
      run: |
        echo "Validating configuration for ${{ steps.determine-env.outputs.environment }} deployment..."
        
        # Check for environment-specific files
        env_file=".env.${{ steps.determine-env.outputs.environment }}"
        if [ ! -f "$env_file" ] && [ ! -f ".env.template" ]; then
          echo "::error::No environment configuration found for ${{ steps.determine-env.outputs.environment }}"
          exit 1
        fi
        
        # Run validation script if available
        if [ -f "scripts/validate_deployment.sh" ]; then
          bash scripts/validate_deployment.sh
        fi
        
        echo "‚úÖ Configuration validated"

  build-and-test:
    name: Build and Test
    needs: pre-deployment-validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=${{ needs.pre-deployment-validation.outputs.deploy_environment }}
    
    - name: Build Docker images
      run: |
        echo "Building Docker images..."
        
        # Build orchestrator image
        docker build -t dean-orchestrator:test -f src/orchestration/Dockerfile.prod .
        
        echo "‚úÖ Docker images built successfully"
    
    - name: Run tests
      run: |
        echo "Running tests..."
        
        # Create test environment
        cp .env.template .env.test
        
        # Run unit tests
        if [ -f "scripts/run_tests.sh" ]; then
          bash scripts/run_tests.sh
        fi
        
        # Run integration tests with Docker Compose
        docker compose -f docker-compose.yml -f docker-compose.test.yml up -d
        
        # Wait for services to be ready
        sleep 30
        
        # Run health checks
        curl -f http://localhost:8082/health || exit 1
        
        # Cleanup
        docker compose down
        
        echo "‚úÖ All tests passed"
    
    - name: Push Docker images
      uses: docker/build-push-action@v4
      with:
        context: .
        file: src/orchestration/Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to ${{ needs.pre-deployment-validation.outputs.deploy_environment }}
    needs: [pre-deployment-validation, build-and-test]
    runs-on: ubuntu-latest
    environment: ${{ needs.pre-deployment-validation.outputs.deploy_environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup deployment environment
      run: |
        echo "Setting up ${{ needs.pre-deployment-validation.outputs.deploy_environment }} deployment..."
        
        # Create deployment directory
        mkdir -p deployment
        
        # Copy necessary files
        cp docker-compose.prod.yml deployment/
        cp -r nginx deployment/
        cp -r postgres deployment/
        cp wait-for-it.sh deployment/
        
        # Generate deployment-specific .env
        if [ -f ".env.${{ needs.pre-deployment-validation.outputs.deploy_environment }}" ]; then
          cp ".env.${{ needs.pre-deployment-validation.outputs.deploy_environment }}" deployment/.env
        else
          cp .env.template deployment/.env
        fi
        
        # Update image tags in docker-compose
        sed -i "s|dean-orchestrator:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-validation.outputs.deploy_environment }}|g" deployment/docker-compose.prod.yml
    
    - name: Deploy to server
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        # This is a placeholder for actual deployment
        # In a real scenario, you would:
        # 1. Copy files to the deployment server
        # 2. Run docker-compose up -d
        # 3. Run health checks
        
        echo "Deployment simulation for ${{ needs.pre-deployment-validation.outputs.deploy_environment }}"
        echo "Would deploy to: $DEPLOY_HOST"
        
        # For actual deployment, uncomment and modify:
        # echo "$DEPLOY_KEY" > deploy_key
        # chmod 600 deploy_key
        # scp -i deploy_key -r deployment/* $DEPLOY_USER@$DEPLOY_HOST:/opt/dean/
        # ssh -i deploy_key $DEPLOY_USER@$DEPLOY_HOST "cd /opt/dean && docker compose -f docker-compose.prod.yml up -d"
    
    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        
        # In a real deployment, you would check:
        # - Service health endpoints
        # - Database connectivity
        # - SSL certificate validity
        
        echo "‚úÖ Deployment verification passed"

  post-deployment:
    name: Post-deployment Tasks
    needs: [pre-deployment-validation, deploy]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        
        # Placeholder for actual smoke tests
        # Would include:
        # - API endpoint tests
        # - Critical path validation
        # - Performance baseline checks
        
        echo "‚úÖ Smoke tests passed"
    
    - name: Update deployment status
      run: |
        echo "Updating deployment status..."
        
        # Create deployment record
        cat > deployment-record.json <<EOF
        {
          "environment": "${{ needs.pre-deployment-validation.outputs.deploy_environment }}",
          "version": "${{ github.sha }}",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "deployed_by": "${{ github.actor }}",
          "status": "success"
        }
        EOF
        
        echo "‚úÖ Deployment completed successfully"
    
    - name: Notify team
      if: always()
      run: |
        # Placeholder for notifications
        # Would send to Slack, email, etc.
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "üéâ Deployment to ${{ needs.pre-deployment-validation.outputs.deploy_environment }} succeeded!"
        else
          echo "‚ùå Deployment to ${{ needs.pre-deployment-validation.outputs.deploy_environment }} failed!"
        fi

  rollback:
    name: Rollback Preparation
    needs: [pre-deployment-validation, deploy]
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Prepare rollback
      run: |
        echo "Preparing rollback plan..."
        
        # In a real scenario, this would:
        # 1. Identify the previous stable version
        # 2. Generate rollback commands
        # 3. Create rollback documentation
        
        cat > rollback-plan.txt <<EOF
        Rollback Plan for ${{ needs.pre-deployment-validation.outputs.deploy_environment }}
        
        1. SSH to deployment server
        2. cd /opt/dean
        3. docker compose -f docker-compose.prod.yml down
        4. git checkout <previous-version>
        5. docker compose -f docker-compose.prod.yml up -d
        6. Verify services are healthy
        EOF
        
        echo "‚ö†Ô∏è Rollback plan created. Manual intervention may be required."