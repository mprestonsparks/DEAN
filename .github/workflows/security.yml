name: Security Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit
          
      - name: Run Safety check
        run: |
          pip install -r requirements/base.txt
          safety check --json > safety-report.json || true
          
      - name: Run pip-audit
        run: |
          pip-audit --desc --format json > pip-audit-report.json || true
          
      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: |
            safety-report.json
            pip-audit-report.json
            
      - name: Check for critical vulnerabilities
        run: |
          if grep -q '"severity": "critical"' safety-report.json; then
            echo "Critical vulnerabilities found!"
            exit 1
          fi

  code-scan:
    name: Static Code Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Run Bandit security scanner
        run: |
          pip install bandit[toml]
          bandit -r src/ -f json -o bandit-report.json || true
          
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/owasp-top-ten
            
      - name: Upload code scan results
        uses: actions/upload-artifact@v4
        with:
          name: code-scan-results
          path: bandit-report.json

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build Docker image
        run: |
          docker build -t dean-orchestration:scan .
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'dean-orchestration:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run Grype scanner
        uses: anchore/scan-action@v3
        with:
          image: 'dean-orchestration:scan'
          fail-build: true
          severity-cutoff: high

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
          
      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  license-scan:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install license checker
        run: |
          pip install pip-licenses
          
      - name: Check licenses
        run: |
          pip install -r requirements/base.txt
          pip-licenses --format=json --output-file=licenses.json
          
      - name: Validate licenses
        run: |
          # Check for problematic licenses
          python -c "
          import json
          with open('licenses.json') as f:
              licenses = json.load(f)
          
          prohibited = ['GPL', 'AGPL', 'LGPL']
          issues = []
          
          for pkg in licenses:
              license = pkg.get('License', '')
              if any(p in license for p in prohibited):
                  issues.append(f\"{pkg['Name']}: {license}\")
          
          if issues:
              print('Prohibited licenses found:')
              for issue in issues:
                  print(f'  - {issue}')
              exit(1)
          else:
              print('All licenses are compliant')
          "
          
      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json

  create-report:
    name: Create Security Report
    needs: [dependency-scan, code-scan, container-scan, secret-scan, license-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Generate consolidated report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Date: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Summary" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Code Scan: ${{ needs.code-scan.result }}" >> security-report.md
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
          echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-report.md
          echo "- License Scan: ${{ needs.license-scan.result }}" >> security-report.md
          
      - name: Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30
          
      - name: Notify on failures
        if: contains(needs.*.result, 'failure')
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Security scan found issues",
              "attachments": [{
                "color": "danger",
                "fields": [{
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                }, {
                  "title": "Branch",
                  "value": "${{ github.ref }}",
                  "short": true
                }, {
                  "title": "Run URL",
                  "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "short": false
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}